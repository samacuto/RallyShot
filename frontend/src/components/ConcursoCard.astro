---
import { Camera, Calendar } from '@lucide/astro'
import type { Concurso } from '../lib/types/types'
import WarpBackground from '@components/WarpBackground.tsx'

interface ColorScheme {
  color1: string
  color2: string
  color3: string
  speed?: number
  swirl?: number
  swirlIterations?: number
  shapeScale?: number
}

type Props = {
  concurso: Concurso
  scheme: ColorScheme
}

const { concurso, scheme } = Astro.props

// Convertimos strings a Date
const ahora = new Date()
const fechaInicio = new Date(concurso.fecha_inicio)
const fechaFinSubida = new Date(concurso.fecha_fin_subida)
const fechaInicioVotacion = new Date(concurso.fecha_inicio_votacion)
const fechaFinVotacion = new Date(concurso.fecha_fin_votacion)

// Calculamos estado y fecha relevante
let estadoEtiqueta = ''
let bgBadge = ''
let labelFecha = ''
let valorFecha = ''

if (ahora < fechaInicio) {
  estadoEtiqueta = 'Próximo'
  bgBadge = 'bg-blue-600'
  labelFecha = 'Inicio del concurso'
  valorFecha = fechaInicio.toLocaleDateString()
} else if (ahora >= fechaInicio && ahora <= fechaFinSubida) {
  estadoEtiqueta = 'En periodo de subida'
  bgBadge = 'bg-green-600'
  labelFecha = 'Fin de subida'
  valorFecha = fechaFinSubida.toLocaleDateString()
} else if (ahora > fechaFinSubida && ahora < fechaInicioVotacion) {
  estadoEtiqueta = 'Próxima votación'
  bgBadge = 'bg-indigo-500'
  labelFecha = 'Inicio de votación'
  valorFecha = fechaInicioVotacion.toLocaleDateString()
} else if (ahora >= fechaInicioVotacion && ahora <= fechaFinVotacion) {
  estadoEtiqueta = 'En periodo de votación'
  bgBadge = 'bg-yellow-500'
  labelFecha = 'Fin de votación'
  valorFecha = fechaFinVotacion.toLocaleDateString()
} else {
  estadoEtiqueta = 'Finalizado'
  bgBadge = 'bg-red-600'
  labelFecha = ''
  valorFecha = ''
}
---

<a
  href={`/concursos/${concurso.id}`}
  class="relative block rounded-lg shadow-lg overflow-hidden border-2 border-gray-200
         transition-transform duration-300 ease-in-out
         hover:shadow-xl hover:border-gray-500 hover:scale-[1.01] hover:-rotate-1 cursor-pointer group"
>
  <!-- Badge en la esquina superior izquierda -->
  <span
    class={`absolute top-3 left-3 px-2 py-1 text-xs font-semibold text-white rounded-full ${bgBadge} z-30`}
  >
    {estadoEtiqueta}
  </span>

  <!-- Warp background en la parte superior -->
  <div class="relative h-48 w-full overflow-hidden">
    <WarpBackground
      client:load
      color1={scheme.color1}
      color2={scheme.color2}
      color3={scheme.color3}
      speed={scheme.speed ?? 0.3}
      swirl={scheme.swirl ?? 2.0}
      swirlIterations={scheme.swirlIterations ?? 10}
      shapeScale={scheme.shapeScale ?? 0.6}
      style={{
        position: 'absolute',
        top: 0,
        left: 0,
        width: '100%',
        height: '100%',
      }}
    />
    <div class="absolute inset-0 bg-black/40 z-10"></div>
    <h3
      class="absolute font-limelight text-5xl inset-0 flex items-center text-left text-white px-2 z-20 pointer-events-none"
    >
      <Camera class="w-5 h-5 inline-block mr-2" />
      {concurso.titulo}
    </h3>
  </div>

  <!-- Contenido principal -->
  <div class="p-6 bg-primary border-t border-gray-200 relative z-10">
    {
      labelFecha && (
        <div class="flex items-center gap-2 text-sm text-gray-400 mb-2">
          <Calendar class="w-4 h-4" />
          <span class="font-medium">{labelFecha}:</span>
          <span>{valorFecha}</span>
        </div>
      )
    }
    {
      estadoEtiqueta === 'Finalizado' && (
        <div class="text-sm text-gray-400 mb-2">Concurso finalizado</div>
      )
    }
  </div>

  <!-- Overlay de descripción al hacer hover en toda la tarjeta -->
  <div
    class="absolute inset-0 bg-black/70 text-white flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300 p-6 z-40"
  >
    <p class="text-xl font-limelight text-gray-100">{concurso.descripcion}</p>
  </div>
</a>
