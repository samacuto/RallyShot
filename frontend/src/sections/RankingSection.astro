---
import FotoDestacada from '@components/FotoDestacada.astro'
import type { Fotografia } from '../lib/types/types'

const { fotosDestacadas = [] } = Astro.props as {
  fotosDestacadas: Fotografia[]
}
const hayFotos = Array.isArray(fotosDestacadas) && fotosDestacadas.length > 0
---

{
  hayFotos && (
    <section class="bg-secondary py-10 px-4 max-w-6xl mx-auto z-10 space-y-12">
      <h2 class="text-5xl text-gray-300 text-center font-merriweather font-bold tracking-wide">
        Fotos destacadas
      </h2>

      <div
        id="portfolio-gallery"
        class="relative w-full min-h-[400px] md:min-h-[500px] max-w-[1140px] mx-auto overflow-visible"
      >
        {fotosDestacadas.map((foto, i) => (
          <FotoDestacada
            foto={foto}
            index={i}
            isFirst={i === 0}
            isLast={i === fotosDestacadas.length - 1}
            data-index={i}
          />
        ))}
      </div>
    </section>
  )
}

<script is:inline>
  document.addEventListener('DOMContentLoaded', function () {
    const gallery = document.getElementById('portfolio-gallery')
    if (!gallery) return

    const items = Array.from(gallery.querySelectorAll('.portfolio'))

    function closeAll() {
      items.forEach((el) => {
        el.classList.remove('opened')
        el.style.display = ''
      })
    }

    items.forEach((item, idx) => {
      // Al hacer clic en miniatura, abrimos
      item.addEventListener('click', function (e) {
        e.stopPropagation()
        // Si ya está abierto, no hacemos nada (sólo el botón “X” cierra).
        if (item.classList.contains('opened')) return
        // Si no está abierto, lo abrimos y ocultamos los demás.
        closeAll()
        item.classList.add('opened')
        items.forEach((el, i) => {
          if (i !== idx) el.style.display = 'none'
        })
      })

      // Botón Cerrar
      const closeBtn = item.querySelector('[data-action="close"]')
      closeBtn?.addEventListener('click', function (e) {
        e.stopPropagation()
        closeAll()
      })

      // Botón Anterior
      const prevBtn = item.querySelector('[data-action="prev"]')
      prevBtn?.addEventListener('click', function (e) {
        e.stopPropagation()
        const prevIdx = idx - 1
        if (prevIdx >= 0) {
          closeAll()
          const prevItem = items[prevIdx]
          prevItem.classList.add('opened')
          items.forEach((el, i) => {
            if (i !== prevIdx) el.style.display = 'none'
          })
        }
      })

      // Botón Siguiente
      const nextBtn = item.querySelector('[data-action="next"]')
      nextBtn?.addEventListener('click', function (e) {
        e.stopPropagation()
        const nextIdx = idx + 1
        if (nextIdx < items.length) {
          closeAll()
          const nextItem = items[nextIdx]
          nextItem.classList.add('opened')
          items.forEach((el, i) => {
            if (i !== nextIdx) el.style.display = 'none'
          })
        }
      })
    })

    // Cerrar si se clickea fuera
    document.addEventListener('click', function (e) {
      if (!gallery.contains(e.target)) {
        closeAll()
      }
    })
  })
</script>

<style>
  .portfolio {
    position: absolute;
    transition:
      transform 0.2s,
      box-shadow 0.2s;
    box-shadow: -2px 0 3px rgba(0, 0, 0, 0.3);
    cursor: pointer;
    overflow: hidden;
    background: #000;
  }
  .portfolio.rotated {
    transform: rotate(-2deg);
  }
  .portfolio.rotated:not(.opened):hover {
    transform: translateY(-10px) rotate(-2deg);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
  }
  .portfolio.opened {
    position: relative;
    z-index: 1000;
    left: 0 !important;
    transform: rotate(0deg) !important;
    box-shadow: 0 0 3px rgba(0, 0, 0, 0.3);
    width: 90% !important;
    max-width: 1024px !important;
  }
  .portfolio .info {
    display: none;
  }
  .portfolio.opened .info {
    display: block;
    position: relative;
    background: rgba(0, 0, 0, 0.6);
    padding: 1rem;
    color: #f0f0f0;
  }
  .close-btn,
  .prev-btn,
  .next-btn {
    font-size: 1rem;
    line-height: 1;
    border: none;
    cursor: pointer;
  }
  .close-btn:hover,
  .prev-btn:hover,
  .next-btn:hover {
    background: rgba(255, 255, 255, 0.2);
  }
  .info-title {
    margin: 0;
  }
  .info-desc {
    margin-bottom: 0.75rem;
  }
  .info-meta span {
    /* puedes poner iconos o estilos extras */
  }
  .ombra {
    box-shadow: 0 15px 10px rgba(0, 0, 0, 0.7);
    transform: rotate(-2deg);
    z-index: -1;
    border-radius: 9999px;
  }
  .txt {
    margin-top: -2px;
    padding-top: 20px;
    width: 98%;
    padding-left: 2%;
    height: 33px;
    background: #f7f7f7;
  }
</style>
