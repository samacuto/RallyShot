---
import Layout from '@layouts/Layout.astro'
import GaleriaConcursoSection from '@sections/GaleriaConcursoSection.astro'
import WarpBackground from '@components/WarpBackground.tsx'
import type { Concurso } from '@lib/types/types'

// 1) Definimos aquí la misma lista de esquemas EXACTA que en ConcursosSection.astro
const schemes = [
  {
    color1: '#ff416c',
    color2: '#ff4b2b',
    color3: '#f9d423',
    speed: 0.3,
    swirl: 1.5,
    swirlIterations: 8,
    shapeScale: 0.7,
  },
  {
    color1: '#00c6ff',
    color2: '#0072ff',
    color3: '#00f260',
    speed: 0.4,
    swirl: 2.0,
    swirlIterations: 12,
    shapeScale: 0.5,
  },
  {
    color1: '#833ab4',
    color2: '#fd1d1d',
    color3: '#fcb045',
    speed: 0.2,
    swirl: 1.8,
    swirlIterations: 10,
    shapeScale: 0.6,
  },
  {
    color1: '#ff9a9e',
    color2: '#fad0c4',
    color3: '#fbc2eb',
    speed: 0.35,
    swirl: 1.3,
    swirlIterations: 9,
    shapeScale: 0.65,
  },
  {
    color1: '#a18cd1',
    color2: '#fbc2eb',
    color3: '#f9f9f9',
    speed: 0.25,
    swirl: 2.3,
    swirlIterations: 11,
    shapeScale: 0.55,
  },
  {
    color1: '#f6d365',
    color2: '#fda085',
    color3: '#fbc2eb',
    speed: 0.3,
    swirl: 1.6,
    swirlIterations: 10,
    shapeScale: 0.6,
  },
  {
    color1: '#89f7fe',
    color2: '#66a6ff',
    color3: '#c2e9fb',
    speed: 0.2,
    swirl: 1.4,
    swirlIterations: 8,
    shapeScale: 0.5,
  },
  {
    color1: '#84fab0',
    color2: '#8fd3f4',
    color3: '#a6c1ee',
    speed: 0.3,
    swirl: 1.9,
    swirlIterations: 9,
    shapeScale: 0.7,
  },
  {
    color1: '#ffecd2',
    color2: '#fcb69f',
    color3: '#ff9a9e',
    speed: 0.3,
    swirl: 1.5,
    swirlIterations: 12,
    shapeScale: 0.65,
  },
]

// 2) Obtenemos el contestId desde la URL
const { contestId } = Astro.params as { contestId: string }

const backendURL = import.meta.env.PUBLIC_BACKEND_BASE_URL
let concursos: Concurso[] = []
let concurso: Concurso | null = null
let errorConcurso: string | null = null

try {
  // 3) Pedir la lista completa de concursos
  const resAll = await fetch(`${backendURL}/api/concursos`)
  if (!resAll.ok) throw new Error(`Error al cargar lista de concursos`)
  concursos = await resAll.json()

  // 4) Pedir el detalle del concurso concreto
  const resDetail = await fetch(`${backendURL}/api/concursos/${contestId}`)
  if (!resDetail.ok) throw new Error(`Concurso HTTP ${resDetail.status}`)
  concurso = await resDetail.json()
} catch (e: unknown) {
  console.error('Error cargando concursos/detail:', e)
  errorConcurso = 'No se pudieron cargar los datos del concurso.'
}

// 5) Encontrar el índice de este concurso en la lista completa
let scheme = schemes[0]
if (concurso) {
  const idx = concursos.findIndex((c) => c.id === concurso!.id)
  const schemeIndex = idx >= 0 ? idx % schemes.length : 0
  scheme = schemes[schemeIndex]
}

// 6) Lógica de estados (subida abierta o no)
const ahora = new Date()
const fechaInicio = concurso?.fecha_inicio
  ? new Date(concurso.fecha_inicio)
  : null
const fechaFinSubida = concurso?.fecha_fin_subida
  ? new Date(concurso.fecha_fin_subida)
  : null
const fechaInicioVotacion = concurso?.fecha_inicio_votacion
  ? new Date(concurso.fecha_inicio_votacion)
  : null
const fechaFinVotacion = concurso?.fecha_fin_votacion
  ? new Date(concurso.fecha_fin_votacion)
  : null

const enSubidaAbierta =
  fechaInicio && fechaFinSubida
    ? ahora >= fechaInicio && ahora <= fechaFinSubida
    : false

const user = Astro.locals.user ?? null
---

<Layout
  user={user}
  title={`Concurso ${concurso?.nombre ?? contestId} | RallyShot`}
>
  <main class="relative min-h-screen">
    <!-- Banner superior con el mismo scheme -->
    {
      !errorConcurso && (
        <section class="relative h-50 w-full overflow-hidden border-b border-gray-700 shadow-lg mb-8">
          <WarpBackground
            client:load
            color1={scheme.color1}
            color2={scheme.color2}
            color3={scheme.color3}
            speed={scheme.speed}
            swirl={scheme.swirl}
            swirlIterations={scheme.swirlIterations}
            shapeScale={scheme.shapeScale}
            style={{
              position: 'absolute',
              top: 0,
              left: 0,
              width: '100%',
              height: '100%',
            }}
          />
          <div class="absolute inset-0 bg-black/40 z-0" />
          <h1 class="absolute inset-0 flex items-center justify-center text-white text-6xl font-limelight px-6 z-10 text-left">
            {concurso?.nombre || 'No disponible'}
          </h1>
        </section>
      )
    }

    <div class="max-w-5xl mx-auto p-6">
      <!-- Solo mostramos el bloque de inscripción si el concurso está en periodo de subida abierta -->
      {
        enSubidaAbierta && (
          <section id="inscripcion-container" class="mb-8">
            <div class="max-w-xl font-light mx-auto rounded border border-green-500 bg-primary text-gray-200 p-4 text-center">
              {user ? (
                <p>Comprobando estado de inscripción…</p>
              ) : (
                <p>
                  Debes{' '}
                  <a
                    href="/login"
                    class="text-blue-600 font-bold underline hover:text-blue-500"
                  >
                    iniciar sesión
                  </a>{' '}
                  para unirte al concurso.
                </p>
              )}
            </div>
          </section>
        )
      }

      <!-- Galería del concurso -->
      <GaleriaConcursoSection
        contestId={contestId}
        page={Number(
          new URL(Astro.request.url).searchParams.get('page') || '1'
        )}
        limit={Number(
          new URL(Astro.request.url).searchParams.get('limit') || '3'
        )}
        sortBy={new URL(Astro.request.url).searchParams.get('sortBy') ||
          'fecha_subida'}
        order={new URL(Astro.request.url).searchParams.get('order') || 'desc'}
      />
    </div>
  </main>

  <!-- Solo cargamos el script de inscripción si está en periodo de subida -->
  {
    enSubidaAbierta && user && (
      <script type="module" define:vars={{ user, contestId }}>
        import {initInscripcion} from '/scripts/participacion.js'
        initInscripcion({(user, contestId)})
      </script>
    )
  }

  <script type="module" src="/scripts/fullscreen.js"></script>
</Layout>
